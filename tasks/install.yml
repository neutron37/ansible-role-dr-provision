---
- name: create dr-provision directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
  - "{{ provision_download_dir }}"
  - "{{ provision_catalog_dir }}"
  - "{{ provision_catalog_dir }}/contents"
  - "{{ provision_catalog_dir }}/plugins"
  - "{{ provision_download_dir }}/{{ provision_release_tag }}"
  - "{{ provision_content_dir }}/{{ provision_content_release_tag }}"
  - "{{ provision_catalog_dir }}"

- name: get catalog json
  get_url:
    url: "{{ provision_catalog_base_url }}/"
    dest: "{{ provision_catalog_dir }}/catalog.json"

#################
# cat catalog.json | jq -c '.content[] | {id: .id, url: ("https://qww9e4paf1.execute-api.us-west-2.amazonaws.com/main/catalog"+"/content/"+.id)}' | jq -s '.'
- name: get catalog content packages json
  shell: "cat {{ provision_catalog_dir }}/catalog.json | jq -c '.content[] | {id: .id, url: (\"{{ provision_catalog_base_url }}/content/\"+.id)}' | jq -s '.'"
  register: get_catalog_content_packages_results


- name: Set configured content packages
  set_fact:
    provision_content_packages_with_url: "{{ all_provision_content_packages|default({})}}"

- name: get content packages with url
  set_fact:
    provision_content_packages_with_url : "{{ provision_content_packages_with_url | combine({item.id : item.url}) }}"
  with_items:
    -  "{{ get_catalog_content_packages_results.stdout | from_json | list }}"
  when: item.id in provision_content_packages and item.id not in ['drp-community-content', 'drp-community-contrib', 'krib']

- debug: msg="{{ provision_content_packages_with_url }}"

- debug: msg="{{ provision_content_packages_with_url | to_json}}"

- name: get content packages artifacts
  get_url:
    url: "{{ item.value }}"
    dest: "{{ provision_catalog_dir }}/contents/{{ item.key }}.json"
  with_dict: provision_content_packages_with_url

#################
# cat catalog.json | jq -c '.plugins[] | {id: .id, url: ("https://s3-us-west-2.amazonaws.com/rebar-catalog"+"/"+.versions.tip.source.amd64.linux)}' | jq -s '.'
- name: get catalog plugin providers json
  shell: "cat {{ provision_catalog_dir }}/catalog.json | jq -c '.plugins[] | {id: .id, url: (\"{{ provision_catalog_plugins_base_url }}/\"+.versions.tip.source.amd64.linux)}' | jq -s '.'"
  register: get_catalog_plugin_providers_results

- name: get plugin providers with url
  set_fact:
    provision_plugin_providers_with_url : "{{ all_provision_plugin_providers|default({}) | combine( {'id': item.id, 'url': item.url} ) | list  }}"
  with_items:
    -  "{{ get_catalog_plugin_providers_results.stdout | from_json | list }}"
  when: item.id in provision_plugin_providers 

- name: get plugin providers artifacts
  get_url:
    url: "{{ item.url }}"
    dest: "{{ provision_catalog_dir }}/plugins/{{ item.id }}"
  with_items: provision_plugin_providers_with_url
#################

- name: get provison-content artifacts
  get_url:
    url: "{{ provision_content_release_base_url }}/{{ provision_content_release_tag }}/{{ item }}"
    dest: "{{ provision_content_dir }}/{{ provision_content_release_tag }}/{{ item }}"
  with_items:
    - drp-community-content.yaml
    - drp-community-content.sha256
    - drp-community-contrib.yaml
    - drp-community-contrib.sha256
    - krib.yaml
    - krib.sha256

- name: verify drp-community-content artifact
  command: sha256sum -c drp-community-content.sha256
  args:
    chdir: "{{ provision_content_dir }}/{{ provision_content_release_tag }}"
  register: verify_drp_community_content_results

- name: verify drp-community-contrib artifact
  command: sha256sum -c drp-community-contrib.sha256
  args:
    chdir: "{{ provision_content_dir }}/{{ provision_content_release_tag }}"
  register: verify_drp_community_contrib_results

- name: verify krib artifact
  command: sha256sum -c krib.sha256
  args:
    chdir: "{{ provision_content_dir }}/{{ provision_content_release_tag }}"
  register: verify_krib_results

- name: get dr-provision artifacts
  get_url:
    url: "{{ provision_release_base_url }}/{{ provision_release_tag }}/{{ item }}"
    dest: "{{ provision_download_dir }}/{{ provision_release_tag }}/{{ item }}"
  with_items:
    - dr-provision.zip
    - dr-provision.sha256

- name: verify dr-provision artifacts
  command: sha256sum -c dr-provision.sha256
  args:
    chdir: "{{ provision_download_dir }}/{{ provision_release_tag }}"
  register: verify_provision_results

- name: deploy dr-provision artifacts
  unarchive:
    src: "{{ provision_download_dir }}/{{ provision_release_tag }}/dr-provision.zip"
    dest: "{{ provision_download_dir }}"
    remote_src: yes
  when: verify_provision_results.stdout | search("OK")

- name: install dr-provision binaries
  copy:
    src: "{{ provision_download_dir }}/bin/linux/amd64/{{ item }}"
    dest: "{{ provision_bin_dir }}/{{ item }}"
    mode: 0755
    remote_src: yes
  with_items:
    - dr-provision
    - drpcli
  when: verify_provision_results.stdout | search("OK")
  notify:
    - restart dr-provision

