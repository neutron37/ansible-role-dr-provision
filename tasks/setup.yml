---
- name: create admin user
  shell: "drpcli users create '{\"Name\":\"{{ provision_admin_user }}\",\"Roles\":[\"superuser\"]}'"
  args:
    creates: "{{ provision_var_dir }}/digitalrebar/users/{{ provision_admin_user }}.json"
  when: provision_admin_user != "rocketskates"

- name: check password for admin user
  uri:
    url: "https://127.0.0.1:{{ provision_options['api-port'] }}/api/v3/prefs"
    user: "{{ provision_admin_user }}"
    password: "{{ provision_admin_password }}"
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    force_basic_auth: yes
    return_content: no
    validate_certs: no
  ignore_errors: yes
  register: admin_password_check
  run_once: yes

- name: set the admin user for setup
  set_fact:
    setup_admin_user: "{{ provision_admin_user if admin_password_check.status == 200 else 'rocketskates' | default('rocketskates') }}"
    setup_admin_password: "{{ provision_admin_password if admin_password_check.status == 200 else 'r0cketsk8ts' | default('r0cketsk8ts') }}"

- name: config admin user password
  uri:
    url: "https://127.0.0.1:{{ provision_options['api-port'] }}/api/v3/users/{{ provision_admin_user }}/password"
    body: |
      {
        "Password": "{{ provision_admin_password }}"
      }
    body_format: json
    method: PUT
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    user: "{{ setup_admin_user }}"
    password: "{{ setup_admin_password }}"
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
  run_once: yes
  when: admin_password_check.status != 200

- name: config shell environment with dr-provision api credentials
  copy:
    content: "#!/bin/bash\nexport RS_KEY=\"{{ provision_admin_user }}:{{ provision_admin_password }}\""
    dest: "/etc/profile.d/dr-provision.sh"
    mode: 0755

- name: add drpcli autocomplete definitions
  shell: "drpcli autocomplete /etc/bash_completion.d/drpcli"
  args:
    creates: "/etc/bash_completion.d/drpcli"

- name: generate admin user token
  uri:
    url: "https://127.0.0.1:{{ provision_options['api-port'] }}/api/v3/users/{{ provision_admin_user }}/token?ttl={{ provision_token_ttl }}"
    user: "{{ provision_admin_user }}"
    password: "{{ provision_admin_password }}"
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
  register: admin_token
  until: admin_token.status == 200
  retries: 60
  delay: 1

- name: remove default rocketskates user if different from admin user
  shell: "drpcli -T {{ admin_token.json.Token }} users destroy rocketskates"
  args:
    removes: "{{ provision_var_dir }}/digitalrebar/users/rocketskates.json"
  when: provision_admin_user != "rocketskates" and provision_delete_default_user

#################
- name: check content package exists
  command: drpcli -T {{ admin_token.json.Token }} contents exists {{ item.key }}
  register: content_package_result
  failed_when: content_package_result.rc not in [0,1]
  with_items: "{{ provision_content_packages_with_url|dict2items }}"

- name: create content package
  shell: "drpcli -T {{ admin_token.json.Token }} contents create \"{{ provision_catalog_dir }}/contents/{{ item.item.key }}.json\""
  when: item.rc != 0
  with_items: "{{ content_package_result.results }}"

- name: update content package
  shell: "drpcli -T {{ admin_token.json.Token }} contents update {{ item.item.key }} \"{{ provision_catalog_dir }}/contents/{{ item.item.key }}.json\""
  when: item.rc == 0
  with_items: "{{ content_package_result.results }}"

#################

- name: update plugin provider
  shell: "drpcli -T {{ admin_token.json.Token }} plugin_providers upload {{ item.key }} from \"{{ provision_catalog_dir }}/plugins/{{ item.key }}\""
  with_items: "{{ provision_plugin_providers_with_url|dict2items }}"

#################
- name: check drp-community-content exists
  command: drpcli -T {{ admin_token.json.Token }} contents exists drp-community-content
  register: drp_community_content_result
  failed_when: drp_community_content_result.rc not in [0,1]

- name: create drp-community-content
  shell: "drpcli -T {{ admin_token.json.Token }} contents create \"{{ provision_content_dir }}/{{provision_content_release_tag}}/drp-community-content.yaml\""
  when: verify_drp_community_content_results.stdout | search("OK") and drp_community_content_result.rc != 0

- name: update drp-community-content
  shell: "drpcli -T {{ admin_token.json.Token }} contents update drp-community-content \"{{ provision_content_dir }}/{{provision_content_release_tag}}/drp-community-content.yaml\""
  when: verify_drp_community_content_results.stdout | search("OK") and drp_community_content_result.rc == 0

# - name: re-generate admin user token due to contents create bug
#   uri:
#     url: "https://127.0.0.1:{{ provision_options['api-port'] }}/api/v3/users/{{ provision_admin_user }}/token?ttl={{ provision_token_ttl }}"
#     user: "{{ provision_admin_user }}"
#     password: "{{ provision_admin_password }}"
#     headers:
#       Content-Type: "application/json"
#       Accept: "application/json"
#     force_basic_auth: yes
#     return_content: yes
#     validate_certs: no
#   register: admin_token
#   until: admin_token.status == 200
#   retries: 60
#   delay: 1

#################
- name: check drp-community-contrib exists
  command: drpcli -T {{ admin_token.json.Token }} contents exists drp-community-contrib
  register: drp_community_contrib_result
  failed_when: drp_community_contrib_result.rc not in [0,1]

- name: create drp-community-contrib
  shell: "drpcli -T {{ admin_token.json.Token }} contents create \"{{ provision_content_dir }}/{{provision_content_release_tag}}/drp-community-contrib.yaml\""
  when: verify_drp_community_contrib_results.stdout | search("OK") and drp_community_contrib_result.rc != 0

- name: update drp-community-contrib
  shell: "drpcli -T {{ admin_token.json.Token }} contents update drp-community-contrib \"{{ provision_content_dir }}/{{provision_content_release_tag}}/drp-community-contrib.yaml\""
  when: verify_drp_community_contrib_results.stdout | search("OK") and drp_community_contrib_result.rc == 0

# - name: re-generate admin user token due to contents create bug
#   uri:
#     url: "https://127.0.0.1:{{ provision_options['api-port'] }}/api/v3/users/{{ provision_admin_user }}/token?ttl={{ provision_token_ttl }}"
#     user: "{{ provision_admin_user }}"
#     password: "{{ provision_admin_password }}"
#     headers:
#       Content-Type: "application/json"
#       Accept: "application/json"
#     force_basic_auth: yes
#     return_content: yes
#     validate_certs: no
#   register: admin_token
#   until: admin_token.status == 200
#   retries: 60
#   delay: 1
  
#################
- name: check krib exists
  command: drpcli -T {{ admin_token.json.Token }} contents exists krib
  register: krib_result
  failed_when: krib_result.rc not in [0,1]

- name: create krib
  shell: "drpcli -T {{ admin_token.json.Token }} contents create \"{{ provision_content_dir }}/{{provision_content_release_tag}}/krib.yaml\""
  when: verify_krib_results.stdout | search("OK") and krib_result.rc != 0

- name: update krib
  shell: "drpcli -T {{ admin_token.json.Token }} contents update krib \"{{ provision_content_dir }}/{{provision_content_release_tag}}/krib.yaml\""
  when: verify_krib_results.stdout | search("OK") and krib_result.rc == 0

# - name: re-generate admin user token due to contents create bug
#   uri:
#     url: "https://127.0.0.1:{{ provision_options['api-port'] }}/api/v3/users/{{ provision_admin_user }}/token?ttl={{ provision_token_ttl }}"
#     user: "{{ provision_admin_user }}"
#     password: "{{ provision_admin_password }}"
#     headers:
#       Content-Type: "application/json"
#       Accept: "application/json"
#     force_basic_auth: yes
#     return_content: yes
#     validate_certs: no
#   register: admin_token
#   until: admin_token.status == 200
#   retries: 60
#   delay: 1
#################
- name: check custom subnets
  shell: "drpcli -T {{ admin_token.json.Token }} subnets exists {{ item.Name }}"
  register: provision_subnets_check
  when: not((item.Name is undefined) or (item.Name is none) or (item.Name | trim == ''))
  failed_when: provision_subnets_check.rc not in [0,1]
  with_items: "{{ provision_subnets }}"

- name: create custom subnets
  shell: "drpcli -T {{ admin_token.json.Token }} subnets create '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 1
  with_items: "{{ provision_subnets_check.results }}"

- name: update custom subnets
  shell: "drpcli -T {{ admin_token.json.Token }} subnets update {{ item.item.Name }} '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 0
  with_items: "{{ provision_subnets_check.results }}"
##################
- name: check custom reservations
  shell: "drpcli -T {{ admin_token.json.Token }} reservations exists {{ item.Name }}"
  register: provision_reservations_check
  when: not((item.Name is undefined) or (item.Name is none) or (item.Name | trim == ''))
  failed_when: provision_reservations_check.rc not in [0,1]
  with_items: "{{ provision_reservations }}"

- name: create custom reservations
  shell: "drpcli -T {{ admin_token.json.Token }} reservations create '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 1
  with_items: "{{ provision_reservations_check.results }}"

- name: update custom reservations
  shell: "drpcli -T {{ admin_token.json.Token }} reservations update {{ item.item.Name }} '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 0
  with_items: "{{ provision_reservations_check.results }}"
##################  
- name: copy custom bootenvs
  copy:
    src: "{{ provision_files_bootenvs_path }}/{{ item }}"
    dest: "{{ provision_var_dir }}/digitalrebar/bootenvs/{{ item }}"
    mode: 0640
  register: provision_bootenvs
  when: not((item is undefined) or (item is none) or (item | trim == ''))
  with_items: "{{ provision_bootenvs_files }}"

- name: check custom bootenvs
  shell: "drpcli -T {{ admin_token.json.Token }} bootenvs exists {{ item.item | regex_replace('.yaml','') }}"
  register: provision_bootenvs_check
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == ''))
  failed_when: provision_bootenvs_check.rc not in [0,1]
  with_items: "{{ provision_bootenvs.results }}"

- name: create custom bootenvs
  shell: "drpcli -T {{ admin_token.json.Token }} bootenvs create - < {{ provision_var_dir }}/digitalrebar/bootenvs/{{ item.item.item }}"
  when: not((item.item.item is undefined) or (item.item.item is none) or (item.item.item | trim == '')) and item.rc is defined and item.rc == 1 and item.item.changed == true
  with_items: "{{ provision_bootenvs_check.results }}"

- name: update custom bootenvs
  shell: "drpcli -T {{ admin_token.json.Token }} bootenvs update {{ item.item.item | regex_replace('.yaml','') }} - < {{ provision_var_dir }}/digitalrebar/bootenvs/{{ item.item.item }}"
  when: not((item.item.item is undefined) or (item.item.item is none) or (item.item.item | trim == '')) and item.rc is defined and item.rc == 0 and item.item.changed == true
  with_items: "{{ provision_bootenvs_check.results }}"
###################
- name: check override bootenvs
  shell: "drpcli -T {{ admin_token.json.Token }} bootenvs list"
  register: bootenvs_check

- name: store override bootenvs json
  set_fact:
    bootenvs_json: "{{ bootenvs_check.stdout | from_json | combine(provision_content_bootenvs, recursive=True) }}"

- name: update override bootenvs
  shell: "drpcli -T {{ admin_token.json.Token }} bootenvs update {{ item.1.Name }} '{{ item.1 | to_json() }}'"
  when: not((item.0 is undefined) or (item.0 is none) or (item.0.Name is undefined) or (item.0.Name is none) or (item.0.Name | trim == '')) and not((item.1 is undefined) or (item.1 is none) or (item.1.Name is undefined) or (item.1.Name is none) or (item.1.Name | trim == '')) and item.0.Name == item.1.Name
  with_nested:
    - "{{ provision_content_bootenvs }}"
    - "{{ bootenvs_json }}"
###################
- name: upload boot environments iso
  shell: "drpcli -T {{ admin_token.json.Token }} bootenvs uploadiso {{ item.Name }}"
  when: not((item is undefined) or (item is none) or (item.Name is undefined) or (item.Name is none) or (item.Name | trim == '') or (item.install_iso is undefined) or (item.install_iso is none) or (item.install_iso | trim == '')) and item.install_iso
  with_items: "{{ provision_content_bootenvs }}"
###################
- name: copy custom templates
  copy:
    src: "{{ provision_files_templates_path }}/{{ item }}"
    dest: "{{ provision_var_dir }}/digitalrebar/templates/{{ item }}"
    mode: 0640
  register: provision_templates
  when: not((item is undefined) or (item is none) or (item | trim == ''))
  with_items: "{{ provision_templates_files }}"

- name: check custom templates
  shell: "drpcli -T {{ admin_token.json.Token }} templates exists {{ item.item | regex_replace('.yaml','') }}"
  register: provision_templates_check
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == ''))
  failed_when: provision_templates_check.rc not in [0,1]
  with_items: "{{ provision_templates.results }}"

- name: create custom templates
  shell: "drpcli -T {{ admin_token.json.Token }} templates create - < {{ provision_var_dir }}/digitalrebar/templates/{{ item.item.item }}"
  when: not((item.item.item is undefined) or (item.item.item is none) or (item.item.item | trim == '')) and item.rc is defined and item.rc == 1 and item.item.changed == true
  with_items: "{{ provision_templates_check.results }}"

- name: update custom templates
  shell: "drpcli -T {{ admin_token.json.Token }} templates update {{ item.item.item | regex_replace('.yaml','') }} - < {{ provision_var_dir }}/digitalrebar/templates/{{ item.item.item }}"
  when: not((item.item.item is undefined) or (item.item.item is none) or (item.item.item | trim == '')) and item.rc is defined and item.rc == 0 and item.item.changed == true
  with_items: "{{ provision_templates_check.results }}"
####################
- name: check custom params
  shell: "drpcli -T {{ admin_token.json.Token }} params exists {{ item.Name }}"
  register: provision_params_check
  when: not((item.Name is undefined) or (item.Name is none) or (item.Name | trim == ''))
  failed_when: provision_params_check.rc not in [0,1]
  with_items: "{{ provision_params }}"

- name: create custom params
  shell: "drpcli -T {{ admin_token.json.Token }} params create '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 1
  with_items: "{{ provision_params_check.results }}"

- name: update custom params
  shell: "drpcli -T {{ admin_token.json.Token }} params update {{ item.item.Name }} '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 0
  with_items: "{{ provision_params_check.results }}"
##################
- name: check custom profiles
  shell: "drpcli -T {{ admin_token.json.Token }} profiles exists {{ item.Name }}"
  register: provision_profiles_check
  when: not((item.Name is undefined) or (item.Name is none) or (item.Name | trim == ''))
  failed_when: provision_profiles_check.rc not in [0,1]
  with_items: "{{ provision_profiles }}"

- name: create custom profiles
  shell: "drpcli -T {{ admin_token.json.Token }} profiles create '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 1
  with_items: "{{ provision_profiles_check.results }}"

- name: update custom profiles
  shell: "drpcli -T {{ admin_token.json.Token }} profiles update {{ item.item.Name }} '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 0
  with_items: "{{ provision_profiles_check.results }}"

##################
- name: check custom workflows
  shell: "drpcli -T {{ admin_token.json.Token }} workflows exists {{ item.Name }}"
  register: provision_workflows_check
  when: not((item.Name is undefined) or (item.Name is none) or (item.Name | trim == ''))
  failed_when: provision_workflows_check.rc not in [0,1]
  with_items: "{{ provision_workflows }}"

- name: create custom workflows
  shell: "drpcli -T {{ admin_token.json.Token }} workflows create '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 1
  with_items: "{{ provision_workflows_check.results }}"

- name: update custom workflows
  shell: "drpcli -T {{ admin_token.json.Token }} workflows update {{ item.item.Name }} '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 0
  with_items: "{{ provision_workflows_check.results }}"
##################
- name: check custom stages
  shell: "drpcli -T {{ admin_token.json.Token }} stages exists {{ item.Name }}"
  register: provision_stages_check
  when: not((item.Name is undefined) or (item.Name is none) or (item.Name | trim == ''))
  failed_when: provision_stages_check.rc not in [0,1]
  with_items: "{{ provision_stages }}"

- name: create custom stages
  shell: "drpcli -T {{ admin_token.json.Token }} stages create '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 1
  with_items: "{{ provision_stages_check.results }}"

- name: update custom stages
  shell: "drpcli -T {{ admin_token.json.Token }} stages update {{ item.item.Name }} '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 0
  with_items: "{{ provision_stages_check.results }}"
##################
- name: check custom tasks
  shell: "drpcli -T {{ admin_token.json.Token }} tasks exists {{ item.Name }}"
  register: provision_tasks_check
  when: not((item.Name is undefined) or (item.Name is none) or (item.Name | trim == ''))
  failed_when: provision_tasks_check.rc not in [0,1]
  with_items: "{{ provision_tasks }}"

- name: create custom tasks
  shell: "drpcli -T {{ admin_token.json.Token }} tasks create '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 1
  with_items: "{{ provision_tasks_check.results }}"

- name: update custom tasks
  shell: "drpcli -T {{ admin_token.json.Token }} tasks update {{ item.item.Name }} '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 0
  with_items: "{{ provision_tasks_check.results }}"
##################
- name: check custom jobs
  shell: "drpcli -T {{ admin_token.json.Token }} jobs exists {{ item.Name }}"
  register: provision_jobs_check
  when: not((item.Name is undefined) or (item.Name is none) or (item.Name | trim == ''))
  failed_when: provision_jobs_check.rc not in [0,1]
  with_items: "{{ provision_jobs }}"

- name: create custom jobs
  shell: "drpcli -T {{ admin_token.json.Token }} jobs create '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 1
  with_items: "{{ provision_jobs_check.results }}"

- name: update custom jobs
  shell: "drpcli -T {{ admin_token.json.Token }} jobs update {{ item.item.Name }} '{{ item.item | to_json() }}'"
  when: not((item.item is undefined) or (item.item is none) or (item.item | trim == '')) and item.rc is defined and item.rc == 0
  with_items: "{{ provision_jobs_check.results }}"
##################
- name: check custom machines
  shell: "drpcli -T {{ admin_token.json.Token }} machines list"
  register: machine_profiles_check

- name: store custom machines json
  set_fact:
    machine_profiles_json: "{{ machine_profiles_check.stdout | from_json }}"

- name: create custom machines
  shell: "drpcli -T {{ admin_token.json.Token }} machines create '{{ item | to_json() }}'"
  when: not((item is undefined) or (item is none) or (item | trim == '')) and item.Name not in (machine_profiles_json | selectattr('Name') | map(attribute='Name') | list)
  with_items: "{{ provision_machines }}"

- name: update custom machines
  shell: "drpcli -T {{ admin_token.json.Token }} machines update {{ item.1.Uuid }} '{{ item.0 | to_json() }}'"
  when: not((item.0 is undefined) or (item.0 is none) or (item.0 | trim == '')) and item.0.Name == item.1.Name
  with_nested:
    - "{{ provision_machines }}"
    - "{{ machine_profiles_json }}"

##################
- name: config dr-provision preferences
  copy:
    content: '{"Meta":{},"Name":"{{ item.key }}","Val":"{{ item.value }}"}'
    dest: "{{ provision_var_dir }}/digitalrebar/preferences/{{ item.key }}.json"
  with_dict: "{{ provision_preferences }}"
  register: provision_preferences_results

- name: restart dr-provision 
  systemd:
    name: dr-provision
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: provision_preferences_results.changed